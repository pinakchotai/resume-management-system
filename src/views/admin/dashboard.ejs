<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Resume Management System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --background-color: #f5f5f5;
            --card-background: #FFFFFF;
            --text-color: #000000;
            --primary-color: #0d6efd;
        }

        html, body {
            height: 100%;
            margin: 0;
        }

        body {
            background-color: var(--background-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .main-content {
            flex: 1 0 auto;
            padding-bottom: 2rem;
        }

        .footer {
            flex-shrink: 0;
            background-color: var(--primary-color);
            color: white;
            padding: 2rem 0;
            margin-top: auto;
        }

        .navbar {
            background-color: var(--primary-color);
            padding: 1rem 2rem;
        }

        .navbar-brand {
            color: white;
            font-weight: bold;
        }

        .logout-btn {
            color: white;
            border: 1px solid white;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            text-decoration: none;
        }

        .logout-btn:hover {
            background-color: white;
            color: var(--primary-color);
        }

        .stats-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .progress {
            height: 25px;
            margin: 1rem 0;
        }

        .table-container {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            margin-top: 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 5px;
            font-weight: 500;
        }

        .status-pending { background-color: #fff3cd; color: #856404; }
        .status-reviewed { background-color: #cce5ff; color: #004085; }
        .status-shortlisted { background-color: #d4edda; color: #155724; }
        .status-rejected { background-color: #f8d7da; color: #721c24; }

        .footer-link {
            color: white;
            text-decoration: none;
        }

        .footer-link:hover {
            color: rgba(255, 255, 255, 0.8);
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid">
            <a class="navbar-brand" href="/admin/dashboard">RMS Admin</a>
            <div class="d-flex">
                <a href="/admin/logout" class="logout-btn">Logout</a>
            </div>
        </div>
    </nav>

    <div class="main-content">
        <div class="container mt-4">
            <!-- Stats Cards -->
            <div class="row">
                <div class="col-md-4">
                    <div class="stats-card">
                        <h3>Today's Submissions</h3>
                        <h2 class="mb-0"><%= stats.todaySubmissions %></h2>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="stats-card">
                        <h3>Pending Review</h3>
                        <h2 class="mb-0"><%= stats.pendingReview %></h2>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="stats-card">
                        <h3>Shortlisted</h3>
                        <h2 class="mb-0"><%= stats.shortlisted %></h2>
                    </div>
                </div>
            </div>

            <!-- Progress Bar -->
            <div class="stats-card mt-4">
                <h3>Status Distribution</h3>
                <div class="progress">
                    <% if (stats.total > 0) { %>
                        <div class="progress-bar bg-warning" role="progressbar" 
                             style="width: <%= stats.percentages.pending %>%" 
                             title="Pending: <%= stats.percentages.pending %>%">
                            <%= stats.percentages.pending %>% Pending
                        </div>
                        <div class="progress-bar bg-info" role="progressbar" 
                             style="width: <%= stats.percentages.reviewed %>%" 
                             title="Reviewed: <%= stats.percentages.reviewed %>%">
                            <%= stats.percentages.reviewed %>% Reviewed
                        </div>
                        <div class="progress-bar bg-success" role="progressbar" 
                             style="width: <%= stats.percentages.shortlisted %>%" 
                             title="Shortlisted: <%= stats.percentages.shortlisted %>%">
                            <%= stats.percentages.shortlisted %>% Shortlisted
                        </div>
                        <div class="progress-bar bg-danger" role="progressbar" 
                             style="width: <%= stats.percentages.rejected %>%" 
                             title="Rejected: <%= stats.percentages.rejected %>%">
                            <%= stats.percentages.rejected %>% Rejected
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Recent Submissions -->
            <div class="table-container">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3>Recent Submissions</h3>
                    <div class="d-flex gap-3">
                        <button class="btn btn-secondary" id="downloadSelected" disabled>
                            Download Selected (<span id="selectedCount">0</span>)
                        </button>
                        <button class="btn btn-primary" id="exportExcel">Export to Excel</button>
                    </div>
                </div>

                <!-- Search and Filter Section -->
                <div class="row mb-4">
                    <div class="col-md-4">
                        <input type="text" 
                               id="searchInput" 
                               class="form-control" 
                               placeholder="Search by name or email...">
                    </div>
                    <div class="col-md-4">
                        <select id="statusFilter" class="form-select">
                            <option value="">All Statuses</option>
                            <option value="pending">Pending</option>
                            <option value="reviewed">Reviewed</option>
                            <option value="shortlisted">Shortlisted</option>
                            <option value="rejected">Rejected</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <select id="skillFilter" class="form-select">
                            <option value="">All Skills</option>
                            <% uniqueSkills.forEach(skill => { %>
                                <option value="<%= skill %>"><%= skill.charAt(0).toUpperCase() + skill.slice(1) %></option>
                            <% }); %>
                        </select>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table" id="submissionsTable">
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="selectAll"></th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Status</th>
                                <th>Submitted</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% submissions.forEach(function(submission) { %>
                                <tr data-skills='<%= JSON.stringify(submission.skills || []) %>'>
                                    <td>
                                        <input type="checkbox" class="submission-checkbox" 
                                               data-id="<%= submission._id %>">
                                    </td>
                                    <td><%= submission.fullName %></td>
                                    <td><%= submission.email %></td>
                                    <td>
                                        <span class="status-badge status-<%= submission.status || 'pending' %>">
                                            <%= submission.status ? submission.status.charAt(0).toUpperCase() + submission.status.slice(1) : 'Pending' %>
                                        </span>
                                    </td>
                                    <td><%= moment(submission.createdAt).fromNow() %></td>
                                    <td>
                                        <a href="/admin/submissions/<%= submission._id %>" 
                                           class="btn btn-sm btn-primary">View</a>
                                        <button class="btn btn-sm btn-danger delete-btn"
                                                data-id="<%= submission._id %>"
                                                data-name="<%= submission.fullName %>">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.submission-checkbox');
            const downloadBtn = document.getElementById('downloadSelected');
            const selectedCountSpan = document.getElementById('selectedCount');
            const exportExcelBtn = document.getElementById('exportExcel');

            // Handle select all
            selectAll.addEventListener('change', function() {
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                updateDownloadButton();
            });

            // Handle individual checkboxes
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateDownloadButton);
            });

            // Update download button state
            function updateDownloadButton() {
                const selectedCount = document.querySelectorAll('.submission-checkbox:checked').length;
                downloadBtn.disabled = selectedCount === 0;
                selectedCountSpan.textContent = selectedCount;
            }

            // Handle bulk download
            downloadBtn.addEventListener('click', async function() {
                const selectedIds = Array.from(document.querySelectorAll('.submission-checkbox:checked'))
                    .map(checkbox => checkbox.dataset.id);

                try {
                    const response = await fetch('/admin/submissions/bulk-download', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            ids: JSON.stringify(selectedIds),
                            _csrf: '<%= csrfToken %>'
                        })
                    });

                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `resumes-${Date.now()}.zip`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        a.remove();
                    } else {
                        const error = await response.json();
                        alert(error.error || 'Error downloading files');
                    }
                } catch (error) {
                    console.error('Download error:', error);
                    alert('Error downloading files');
                }
            });

            // Handle Excel export
            exportExcelBtn.addEventListener('click', async function() {
                try {
                    const response = await fetch('/admin/submissions/export-excel', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = 'submissions.xlsx';
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        a.remove();
                    } else {
                        const error = await response.json();
                        alert(error.error || 'Error exporting to Excel');
                    }
                } catch (error) {
                    console.error('Export error:', error);
                    alert('Error exporting to Excel');
                }
            });

            // Search and Filter Functionality
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            const skillFilter = document.getElementById('skillFilter');
            const table = document.getElementById('submissionsTable');

            function filterTable() {
                const searchTerm = searchInput.value.toLowerCase();
                const statusTerm = statusFilter.value.toLowerCase();
                const skillTerm = skillFilter.value.toLowerCase();

                const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

                for (let row of rows) {
                    const name = row.cells[1].textContent.toLowerCase();
                    const email = row.cells[2].textContent.toLowerCase();
                    const status = row.cells[3].textContent.toLowerCase();
                    const skills = row.getAttribute('data-skills') ? JSON.parse(row.getAttribute('data-skills')).map(s => s.toLowerCase()) : [];

                    const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm);
                    const matchesStatus = !statusTerm || status.includes(statusTerm);
                    const matchesSkill = !skillTerm || skills.includes(skillTerm);

                    row.style.display = (matchesSearch && matchesStatus && matchesSkill) ? '' : 'none';
                }
            }

            // Add event listeners for search and filters
            searchInput.addEventListener('input', filterTable);
            statusFilter.addEventListener('change', filterTable);
            skillFilter.addEventListener('change', filterTable);

            // Add skills data to rows
            const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
            for (let row of rows) {
                const skills = row.getAttribute('data-skills');
                if (!skills) {
                    // If skills aren't set, try to get them from the submission data
                    const submission = submissions.find(s => 
                        s.fullName === row.cells[1].textContent.trim() && 
                        s.email === row.cells[2].textContent.trim()
                    );
                    if (submission && submission.skills) {
                        row.setAttribute('data-skills', JSON.stringify(submission.skills));
                    }
                }
            }

            // Delete functionality
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const id = this.dataset.id;
                    const name = this.dataset.name;
                    
                    if (confirm(`Are you sure you want to delete the submission from ${name}?`)) {
                        try {
                            const response = await fetch(`/admin/submissions/${id}`, {
                                method: 'DELETE'
                            });

                            if (response.ok) {
                                // Remove the row from the table
                                this.closest('tr').remove();
                                alert('Submission deleted successfully');
                            } else {
                                const error = await response.json();
                                alert(error.error || 'Error deleting submission');
                            }
                        } catch (error) {
                            console.error('Delete error:', error);
                            alert('Error deleting submission');
                        }
                    }
                });
            });
        });
    </script>
</body>
</html> 